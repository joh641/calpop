== CalPop: Tracking Student Population

CalPop utilizes the various APIs offered by developer.berkeley.edu to map
the campus student population over each 30 minute interval of the day.
This information can be used in other applications to visualize the population
density of campus at any given time or to compile statistics for each department.

== Using the API

  /populate.json
  
JSON response of all timeslots and the section population of buildings in those timeslots

for
X in [Sunday, Monday, ..., Friday, Saturday]
Y in [0000, 0030, ..., 2300, 2330]

  /populate.json?day=X
  /populate.json?start_time=Y
  /populate.json?day=X&start_time=Y
  /populate.json?start_time=Y&day=X
  
JSON response of all timeslots(with their building and section population) matching day and/or start time

DISABLED TO AVOID EXCESSIVE EXTERNAL API CALLS:

Z = department name

  /populate?department=Z

JSON response of all timeslots(with their building and section population) matching department

If the department does not exist, the app calls external APIs to obtain the relevant information,
saves this information to the database, and returns the response as normal. See below for more details
on how this is done.

== Under the Hood

Models:
  department.rb, Department has many Courses, has many Classinstances through Courses
  course.rb, Course has many Classinstances, belongs to a Department
  classinstance.rb, Classinstance has many Sections, has many Timeslots through Sections, belongs to a Course
  section.rb, Section has and belongs to many Timeslots, belongs to a Classinstance
  timeslot.rb, Timeslot has and belongs to many Sections
  
Controllers:
  populates_controller.rb, PopulatesController handles all API calls (see above)
  
Views:
  populates/_show.json.json_builder, template for JSON response

Additional Methods:
  additional_methods.rb, methods to call external APIs and return XML for parsing, find the current semester,
  or split section times into multiple 30 minute timeslots
  
== Adding Department Information to the Database using External APIs

When a query is made for a department, Z, the Department method make_department is called. make_department queries
the /department API and parses the XML to find the official department name and code matching the query. If there is not
already an entry in the database for that department, a new one is created. Then the courses for that department are updated
and also added to the database. This is done by using the unique department code to query the /course API. The result is parsed
and for each course not already in the database, a new entry is created. The unique course id for each course is used to query
the /classoffering API to find the offerings for that class for the given semester. Again, if that class does not already exist
in the database, a new entry is made for it. Using that class' unique id to query the /classoffering API again, the sections
for that class are found. This section information is parsed to find the start and end time, building name, and student enrollment information
for each section. The start and end time are used to find which 30 minute timeslots the section spans. Because the APIs in
developer.berkeley.edu return 0 for the student enrollment numbers, I added 1 to the population of each section. This causes
the app to currently represent the number of sections per timeslot, instead of the actual student population per timeslot.
